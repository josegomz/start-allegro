#include <iostream>//librerias de allegro#include <allegro5/allegro.h>#include <allegro5/allegro_native_dialog.h>#include <allegro5/allegro_ttf.h>#include <allegro5/allegro_font.h>#include <allegro5/allegro_primitives.h>//librerias adicionales#include <list>#include "objects.h"//constantesconst int SCREEN_W = 1000;const int SCREEN_H = 700;const float FPS = 60;enum MYKEYS{ UP, DOWN, LEFT, RIGHT};using namespace std;//variables de allegroALLEGRO_DISPLAY *display = NULL;ALLEGRO_EVENT_QUEUE *event_queue = NULL;ALLEGRO_FONT *font24;ALLEGRO_TIMER *timer = NULL;//funcionesvoid init();void deinit();void intro();void initNave(NaveEspacial &nave); void drawNave(NaveEspacial &nave);//funcion principalint main(int argc, char **argv){	//vriables primitivas	bool done = false;	bool keys[4] = {false, false, false, false};	bool redraw = false;	//variables de objeto	NaveEspacial nave;	init();//iniciar los componentes   		intro();//mensaje de bienvenida	al_clear_to_color(al_map_rgb(0,0,0));	al_flip_display();	event_queue = al_create_event_queue();	initNave(nave);	al_register_event_source(event_queue, al_get_keyboard_event_source());	al_register_event_source(event_queue, al_get_display_event_source(display));   	al_register_event_source(event_queue, al_get_timer_event_source(timer));	al_start_timer(timer);	while(!done){		ALLEGRO_EVENT ev;		al_wait_for_event(event_queue, &ev);		//si se necesita dibujar		if (redraw){			redraw = false;			al_clear_to_color(al_map_rgb(0,0,0));			drawNave(nave);			al_flip_display();		}		if(ev.type == ALLEGRO_EVENT_TIMER) {         	if(keys[UP] && nave.y >= 17.0+ 4.0) {            	nave.y -= 4.0;         	}         	if(keys[DOWN] && nave.y <= SCREEN_H - 17.0 - 4.0) {            	nave.y += 4.0;         	}         	if(keys[LEFT] && nave.x >= 12 + 4.0) {            	nave.x -= 4.0;         	}         	if(keys[RIGHT] && nave.x <= SCREEN_W - 15 - 4.0) {            	nave.x += 4.0;        	}        	redraw=true;     	}		if(ev.type == ALLEGRO_EVENT_KEY_DOWN){			switch(ev.keyboard.keycode){				case ALLEGRO_KEY_UP:					keys[UP]=true;				break;				case ALLEGRO_KEY_DOWN:					keys[DOWN]=true;				break;				case ALLEGRO_KEY_LEFT:					keys[LEFT]=true;				break;				case ALLEGRO_KEY_RIGHT:					keys[RIGHT]=true;				break;			}		}		//salirse con la tecla escape 		if(ev.type == ALLEGRO_EVENT_KEY_UP){			switch(ev.keyboard.keycode){				case ALLEGRO_KEY_UP:					keys[UP] = false;				break;				case ALLEGRO_KEY_DOWN:					keys[DOWN] = false;				break;				case ALLEGRO_KEY_LEFT:					keys[LEFT] = false;				break;				case ALLEGRO_KEY_RIGHT:					keys[RIGHT] = false;				break;				case ALLEGRO_KEY_ESCAPE:					done=true;				break;			}		}		//salir con el boton x		if(ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE){			 done=true;		}			}	deinit();//cerrar la ventana	return 0;}//inicializar componentes devoid init(){	//inicializar allegro	if(!al_init()) {      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar allegro5", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);	}   	display = al_create_display(SCREEN_W, SCREEN_H);	if(!display) { // si falla imprimimos esto      al_show_native_message_box(NULL, "Error", NULL, "Falló al crear Display", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);	}	//iniciaializar teclado	if(!al_install_keyboard()) {      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar Teclado", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);   	}   	//inicializar fuente   	al_init_font_addon();   	al_init_ttf_addon();   	font24 = al_load_font("Arcade.ttf",24,0);   	if (!al_init_primitives_addon()){      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar primitivas", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);   	}   	//crear el timer   	timer = al_create_timer(1.0 / FPS);   		if(!timer) {      	al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar el timer", NULL, ALLEGRO_MESSAGEBOX_ERROR);	}   	//todos los componentes cargados}//finalizar los componentes de allegrovoid deinit(){	al_destroy_display(display);//destruye la pantalla y libera memoria	al_destroy_timer(timer);}//Mensaje de introvoid intro(){	char messages [2][30] = {"SPACE X", "Creado por: Josegomz"};	for (int i = 0; i < 2; ++i)	{		al_clear_to_color(al_map_rgb(0, 0, 0));		al_draw_text(font24, al_map_rgb(0, 250, 250), SCREEN_W/2, SCREEN_H/2, ALLEGRO_ALIGN_CENTRE, messages[i]);		al_flip_display();		al_rest(1.0);//espera 10 segundos	}	al_clear_to_color(al_map_rgb(0, 0, 0));	al_draw_text(font24, al_map_rgb(255, 255, 255 ), SCREEN_W/2, SCREEN_H/2, ALLEGRO_ALIGN_CENTRE, "Start");	al_flip_display();	al_rest(.5);//espera 10 segundos}//inicializar la nave espacialvoid initNave(NaveEspacial &nave){	nave.x = 20;	nave.y = SCREEN_H/2-15;		nave.ID = JUGADOR;	nave.vidas = 3;	nave.velocidad = 7;	nave.score = 0;	nave.boundx = 7;	nave.boundy = 6;}//dibujar la navevoid drawNave(NaveEspacial &nave){	al_draw_filled_rectangle(nave.x,nave.y-9,nave.x+10,nave.y-7,al_map_rgb(255,255,0));	al_draw_filled_rectangle(nave.x,nave.y+9,nave.x+10,nave.y+7,al_map_rgb(255,255,0));		al_draw_filled_triangle(nave.x-12, nave.y-17, nave.x+12, nave.y, nave.x-12, nave.y+17, al_map_rgb(255,0,0));	al_draw_filled_rectangle(nave.x-12 ,nave.y-2, nave.x+15, nave.y+2, al_map_rgb(0,0,255));	}