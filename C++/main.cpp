#include <iostream>//librerias de allegro#include <allegro5/allegro.h>#include <allegro5/allegro_native_dialog.h>#include <allegro5/allegro_ttf.h>#include <allegro5/allegro_font.h>#include <allegro5/allegro_primitives.h>#include <allegro5/allegro_image.h>//librerias adicionales#include <list>#include "objects.h"//constantesconst int SCREEN_W = 1000;const int SCREEN_H = 700;const float FPS = 60;const int NUM_BALAS = 5;const int NUM_METEORITOS = 7;Bala balasenemigas[NUM_BALAS]; enum MYKEYS{ UP, DOWN, LEFT, RIGHT,SPACE};using namespace std;//variables de allegro ALLEGRO_DISPLAY *display = NULL;ALLEGRO_EVENT_QUEUE *event_queue = NULL;ALLEGRO_FONT *font24;ALLEGRO_FONT *font60;ALLEGRO_FONT *font100;ALLEGRO_BITMAP *bg = NULL;ALLEGRO_TIMER *timer = NULL;ALLEGRO_BITMAP *icon = NULL;ALLEGRO_BITMAP *player = NULL;ALLEGRO_BITMAP *meteoro = NULL;ALLEGRO_BITMAP *bala1 = NULL;ALLEGRO_BITMAP *bala2 = NULL;//funcionesvoid init();void deinit();void intro();void gameOver();//jugadorvoid iniciarNave(NaveEspacial &nave); void dibujarNave(NaveEspacial &nave);void moverNaveArriba(NaveEspacial &nave);void moverNaveAbajo(NaveEspacial &nave);void moverNaveIzquierda(NaveEspacial &nave);void moverNaveDerecha(NaveEspacial &nave);//balasvoid iniciarBala(Bala bala[], int size);void dibujarBala(Bala bala[], int size);void dispararBala(Bala bala[], int size, NaveEspacial &nave);void actualizarBala(Bala bala[], int size,Meteorito meteorito[], int sizem,NaveEspacial &nave);void iniciarMeteorito(Meteorito meteorito[], int size);void dibujarMeteorito(Meteorito meteorito[], int size);void comenzarMeteorito(Meteorito meteorito[], int size);void actualizarMeteorito(Meteorito meteorito[], int size, NaveEspacial &nave);void iniciarBalaEnemiga(Bala bala[], int size);void dispararBalaEnemiga(Bala bala[], int size, Meteorito meteorito);void actualizarBalaEnemiga(Bala bala[], int size, NaveEspacial &nave);void dibujarBalaEnemiga(Bala bala[], int size);//funcion principalint main(int argc, char **argv){	//vriables primitivas	bool salir = false;	bool keys[5] = {false, false, false, false, false};	bool repintar = false;	int countbg = 0;	//variables de objeto	NaveEspacial nave;	Bala balas[NUM_BALAS];		Meteorito meteoritos[NUM_METEORITOS];	init();//iniciar los componentes	intro();//mensaje de bienvenida	al_clear_to_color(al_map_rgb(0,0,0));	al_flip_display();	event_queue = al_create_event_queue();	bg = al_load_bitmap("img/bg.png");	player = al_load_bitmap("img/player.png");	bala1 = al_load_bitmap("img/bullet1.png");	bala2 = al_load_bitmap("img/bullet2.png");	meteoro = al_load_bitmap("img/enemy.png");		iniciarNave(nave);	iniciarBala(balas, NUM_BALAS);	iniciarBala(balasenemigas, NUM_BALAS);	iniciarMeteorito(meteoritos, NUM_METEORITOS);	srand(time(NULL));	al_register_event_source(event_queue, al_get_keyboard_event_source());	al_register_event_source(event_queue, al_get_display_event_source(display));   	al_register_event_source(event_queue, al_get_timer_event_source(timer));	al_start_timer(timer);	while(!salir){		ALLEGRO_EVENT ev;		al_wait_for_event(event_queue, &ev);		//si se necesita dibujar		if (repintar && al_is_event_queue_empty(event_queue)){			repintar = false;			al_clear_to_color(al_map_rgb(0,0,0));			al_draw_bitmap(bg,1000-countbg,0,0);			al_draw_text(font60, al_map_rgb(255, 255, 0 ), 10, 10, ALLEGRO_ALIGN_LEFT, "Score:");			if (nave.score%30 == 0)			{				for (int i = 0; i < NUM_METEORITOS; ++i)					meteoritos[i].velocidad++;				nave.score++;			}			al_draw_textf(font60, al_map_rgb(255, 0, 0 ), 190, 10, ALLEGRO_ALIGN_LEFT, "%i",nave.score);			dibujarNave(nave);			dibujarBala(balas, NUM_BALAS);			dibujarBalaEnemiga(balasenemigas, NUM_BALAS);				dibujarMeteorito(meteoritos, NUM_METEORITOS);			al_flip_display();			countbg+=2;			if(countbg >2500)				countbg = 0;		}		if(ev.type == ALLEGRO_EVENT_TIMER) {         	if(keys[UP]) {         		moverNaveArriba(nave);         	}         	if(keys[DOWN]) {         		moverNaveAbajo(nave);         	}         	if(keys[LEFT]) {         		moverNaveIzquierda(nave);         	}         	if(keys[RIGHT]) {            	moverNaveDerecha(nave);        	}        	repintar=true;        	actualizarBala(balas,NUM_BALAS,meteoritos,NUM_METEORITOS,nave);        	comenzarMeteorito(meteoritos, NUM_METEORITOS);			actualizarMeteorito(meteoritos,NUM_METEORITOS, nave);			actualizarBalaEnemiga(balasenemigas, NUM_BALAS, nave);     	}		if(ev.type == ALLEGRO_EVENT_KEY_DOWN){			switch(ev.keyboard.keycode){				case ALLEGRO_KEY_UP:					keys[UP]=true;				break;				case ALLEGRO_KEY_DOWN:					keys[DOWN]=true;				break;				case ALLEGRO_KEY_LEFT:					keys[LEFT]=true;				break;				case ALLEGRO_KEY_RIGHT:					keys[RIGHT]=true;				break;				case ALLEGRO_KEY_SPACE:					keys[SPACE] = true;					dispararBala(balas, NUM_BALAS, nave);				break;			}		}		//salirse con la tecla escape 		if(ev.type == ALLEGRO_EVENT_KEY_UP){			switch(ev.keyboard.keycode){				case ALLEGRO_KEY_UP:					keys[UP] = false;				break;				case ALLEGRO_KEY_DOWN:					keys[DOWN] = false;				break;				case ALLEGRO_KEY_LEFT:					keys[LEFT] = false;				break;				case ALLEGRO_KEY_RIGHT:					keys[RIGHT] = false;				break;				case ALLEGRO_KEY_SPACE:					keys[SPACE] = false;				break;				case ALLEGRO_KEY_ESCAPE:					salir = true;				break;			}		}		//salir con el boton x		if(ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE){			 salir=true;		}			}	deinit();//cerrar la ventana	return 0;}//inicializar componentes devoid init(){	//inicializar allegro	if(!al_init()) {      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar allegro5", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);	}   	display = al_create_display(SCREEN_W, SCREEN_H);	if(!display) { // si falla imprimimos esto      al_show_native_message_box(NULL, "Error", NULL, "Falló al crear Display", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);	}	//iniciaializar teclado	if(!al_install_keyboard()) {      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar Teclado", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);   	}   	//inicializar fuente   	al_init_font_addon();   	al_init_ttf_addon();   	font24 = al_load_font("Arcade.ttf",44,0);   	font60 = al_load_font("Arcade.ttf",60,0);   	font100 = al_load_font("Arcade.ttf",100,0);   	if (!al_init_primitives_addon()){      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar primitivas", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);   	}   	if(!al_init_image_addon()) {//inicializamos el uso de imagenes     	al_show_native_message_box(display, "Error", "Error", "Failed to initialize al_init_image_addon!", NULL, ALLEGRO_MESSAGEBOX_ERROR);    	exit(0);   	}   	//crear el timer   	timer = al_create_timer(1.0 / FPS);   		if(!timer) {      	al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar el timer", NULL, ALLEGRO_MESSAGEBOX_ERROR);	}   	//todos los componentes cargados   	icon = al_load_bitmap("img/icon.png");   	al_set_display_icon(display, icon);// icono del programa   	al_set_window_title(display, "SPACE X!");//agregar titulo}//finalizar los componentes de allegrovoid deinit(){	al_destroy_display(display);//destruye la pantalla y libera memoria	al_destroy_timer(timer);	exit(0);}//Mensaje de introvoid intro(){	char messages [2][30] = {"SPACE X", "by Josegomz"};	for (int i = 0; i < 2; ++i){		al_clear_to_color(al_map_rgb(0, 0, 0));		al_draw_text(font24, al_map_rgb(0, 250, 250), SCREEN_W/2, SCREEN_H/2, ALLEGRO_ALIGN_CENTRE, messages[i]);		al_flip_display();		al_rest(0.5);//espera 10 segundos	}	al_clear_to_color(al_map_rgb(0, 0, 0));	al_draw_text(font24, al_map_rgb(255, 255, 255 ), SCREEN_W/2, SCREEN_H/2, ALLEGRO_ALIGN_CENTRE, "Start");	al_flip_display();	al_rest(.5);//espera 10 segundos}//inicializar la nave espacialvoid iniciarNave(NaveEspacial &nave){	nave.x = 20;	nave.y = SCREEN_H/2-15;		nave.ID = JUGADOR;	nave.vidas = 3;	nave.velocidad = 7;	nave.score = 1;	nave.boundx = 20;	nave.boundy = 25;}//dibujar la navevoid dibujarNave(NaveEspacial &nave){	al_draw_bitmap(player,nave.x-30,nave.y-30,0);}void moverNaveArriba(NaveEspacial &nave){	nave.y -= nave.velocidad;	if(nave.y < 0)		nave.y = 0; }void moverNaveAbajo(NaveEspacial &nave){	nave.y += nave.velocidad;	if (nave.y > SCREEN_H)		nave.y = SCREEN_H;}void moverNaveIzquierda(NaveEspacial &nave){	nave.x -= nave.velocidad;	if (nave.x < 0)		nave.x = 0;}void moverNaveDerecha(NaveEspacial &nave){	nave.x += nave.velocidad;	if (nave.x > SCREEN_W){		nave.y = SCREEN_W;	}}void iniciarBala(Bala bala[], int size){	for (int i = 0; i < size; ++i){		bala[i].ID = BALA;		bala[i].velocidad = 10;		bala[i].vivo = false;	}}void dibujarBala(Bala bala[], int size){	for (int i = 0; i < size; ++i)		if (bala[i].vivo)			al_draw_bitmap(bala1, bala[i].x-15, bala[i].y-15,0);}void dispararBala(Bala bala[], int size, NaveEspacial &nave){	for (int i = 0; i < size; ++i){		if (!bala[i].vivo){			bala[i].x = nave.x + 20;			bala[i].y = nave.y;			bala[i].vivo = true;			break;		}	}}	void actualizarBala(Bala bala[], int size, Meteorito meteorito[],int sizem, NaveEspacial &nave){	for (int i = 0; i < size; ++i){		if (bala[i].vivo){			bala[i].x += bala[i].velocidad;			if (bala[i].x > SCREEN_W+15){				bala[i].vivo=false;			}			for (int j = 0; j < sizem; ++j)			{				if (bala[i].x > meteorito[j].x - meteorito[j].boundx 					&& bala[i].x < meteorito[j].x + meteorito[j].boundx 					&&(						(bala[i].y -10 > meteorito[j].y - meteorito[j].boundy && bala[i].y-10 < meteorito[j].y + meteorito[j].boundy)					 ||							(bala[i].y +10 > meteorito[j].y - meteorito[j].boundy && bala[i].y+10 < meteorito[j].y + meteorito[j].boundy)						)					){					meteorito[j].vivo=false;					meteorito[j].x = -30;					bala[i].vivo = false;					nave.score++;				}			}		}	}}void iniciarMeteorito(Meteorito meteorito[], int size){	for (int i = 0; i < size; ++i){		meteorito[i].ID =ENEMIGO;		meteorito[i].vivo = false;		meteorito[i].velocidad = 2;		meteorito[i].velocidady = 3;		meteorito[i].boundx = 20;		meteorito[i].boundy = 20;	}}void dibujarMeteorito(Meteorito meteorito[], int size){	for (int i = 0; i < size; ++i)		if (meteorito[i].vivo)			al_draw_bitmap(meteoro, meteorito[i].x -30, meteorito[i].y - 30, 0);}void comenzarMeteorito(Meteorito meteorito[], int size){	for (int i = 0; i < size; ++i){		if (!meteorito[i].vivo){			if (rand() % 500 == 0){				meteorito[i].vivo = true;				meteorito[i].x = SCREEN_W;				meteorito[i].y = 30 + rand()%(SCREEN_H -60);			}		}	}}void actualizarMeteorito(Meteorito meteorito[], int size, NaveEspacial &nave){	for (int i = 0; i < size; ++i){		if (meteorito[i].vivo){			meteorito[i].x -= meteorito[i].velocidad;			meteorito[i].y += meteorito[i].velocidady;			if(meteorito[i].y-30 < 0 || meteorito[i].y > SCREEN_H - 30) {            	meteorito[i].velocidady = -meteorito[i].velocidady;         	}			if (meteorito[i].x < -10){				meteorito[i].vivo=false;				gameOver();			}			if(nave.y >meteorito[i].y - 10 && nave.y < meteorito[i].y +10){				dispararBalaEnemiga(balasenemigas, NUM_BALAS, meteorito[i]);			}			if (meteorito[i].x - meteorito[i].boundx > nave.x - nave.boundx 				&& meteorito[i].x - meteorito[i].boundx < nave.x + nave.boundx 				&& (					(meteorito[i].y - meteorito[i].boundy  < nave.y + nave.boundy && meteorito[i].y - meteorito[i].boundy > nave.y - nave.boundy)					|| 					(meteorito[i].y + meteorito[i].boundy  < nave.y + nave.boundy && meteorito[i].y + meteorito[i].boundy > nave.y - nave.boundy)					)				)			{				gameOver();			}		}	}}void gameOver(){	al_draw_text(font100, al_map_rgb(255, 255, 0), SCREEN_W/2, SCREEN_H/2 -120, ALLEGRO_ALIGN_CENTRE, "GAME OVER");	al_draw_text(font100, al_map_rgb(255, 0, 0), SCREEN_W/2 -1, SCREEN_H/2 -121, ALLEGRO_ALIGN_CENTRE, "GAME OVER");	al_draw_text(font100, al_map_rgb(255, 255, 0), SCREEN_W/2, SCREEN_H/2 +11, ALLEGRO_ALIGN_CENTRE, "VALES MADRES  :( ");	al_draw_text(font100, al_map_rgb(255, 0, 0), SCREEN_W/2 -1, SCREEN_H/2 +10, ALLEGRO_ALIGN_CENTRE, "VALES MADRES  :( ");	al_flip_display();	while(true){		ALLEGRO_EVENT evt;		al_wait_for_event(event_queue, &evt);		if(evt.type == ALLEGRO_EVENT_KEY_DOWN)			if(evt.keyboard.keycode == ALLEGRO_KEY_ENTER)				break;	}	deinit();}void iniciarBalaEnemiga(Bala bala[], int size){	for (int i = 0; i < size; ++i){		bala[i].ID = BALA;		bala[i].velocidad = 7;		bala[i].vivo = false;	}}void dibujarBalaEnemiga(Bala bala[], int size){	for (int i = 0; i < size; ++i)		if (bala[i].vivo)			al_draw_bitmap(bala2, bala[i].x-15, bala[i].y-15,0);}void dispararBalaEnemiga(Bala bala[], int size, Meteorito meteorito){	for (int i = 0; i < size; ++i){		if (!bala[i].vivo){			if (rand() % 5 == 0){				bala[i].x = meteorito.x - 20;				bala[i].y = meteorito.y;				bala[i].vivo = true;				break;			}		}	}}	void actualizarBalaEnemiga(Bala bala[], int size, NaveEspacial &nave){	for (int i = 0; i < size; ++i){		if (bala[i].vivo){			bala[i].x -= bala[i].velocidad;			if (bala[i].x < 0){				bala[i].vivo=false;			}			if (bala[i].x > nave.x - nave.boundx 				&& bala[i].x < nave.x + nave.boundx 				&&(					(bala[i].y -10 > nave.y - nave.boundy && bala[i].y-10 < nave.y + nave.boundy)					||						(bala[i].y +10 > nave.y - nave.boundy && bala[i].y+10 < nave.y + nave.boundy)					)				){				gameOver();			}		}	}}