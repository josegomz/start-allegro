//librerias de c++#include <iostream>//libreria de gtk//#include <gtk/gtk.h>//librerias de allegro#include <allegro5/allegro.h>#include <allegro5/allegro_native_dialog.h>#include <allegro5/allegro_ttf.h>#include <allegro5/allegro_font.h>#include <allegro5/allegro_primitives.h>#include <allegro5/allegro_image.h>#include <allegro5/allegro_audio.h>#include <allegro5/allegro_acodec.h>//librerias adicionales#include <list>#include "objects.h"//constantesconst int SCREEN_W = 1000;//ancho de la pantallaconst int SCREEN_H = 700;//alto de la pantallaconst float FPS = 60;//velocidad de la fpsconst int NUM_BALAS = 5;//numero de balas que puede disparar un avion asta que haya una disponibleconst int NUM_NAVES = 7;//numero de meteoritos que pueden aparecerBala balasenemigas[NUM_BALAS]; //la linea enemiga puede disparar/*pasarlo a una variable enemiga*/enum MYKEYS{ UP, DOWN, LEFT, RIGHT,SPACE};using namespace std;//variables de allegro ALLEGRO_DISPLAY *display = NULL;ALLEGRO_EVENT_QUEUE *event_queue = NULL;ALLEGRO_TIMER *timer = NULL;ALLEGRO_FONT *font24;//fuentes ALLEGRO_FONT *font60;ALLEGRO_FONT *font100;//cagar imagenesALLEGRO_BITMAP *bg = NULL;ALLEGRO_BITMAP *icon = NULL;ALLEGRO_BITMAP *player = NULL;ALLEGRO_BITMAP *enemigo = NULL;ALLEGRO_BITMAP *vidas = NULL;ALLEGRO_BITMAP *vidas_enem =NULL;//audiosALLEGRO_SAMPLE *sample = NULL;ALLEGRO_SAMPLE *laser = NULL;//funcionesvoid init();//iniciar componentes de allegrovoid deinit();//destruir componentes de allegrovoid intro();//imprime un intro del juegovoid gameOver();//termina el juego//jugadorvoid iniciarNave(NaveEspacial &nave); void dibujarNave(NaveEspacial &nave);void moverNaveArriba(NaveEspacial &nave);void moverNaveAbajo(NaveEspacial &nave);void moverNaveIzquierda(NaveEspacial &nave);void moverNaveDerecha(NaveEspacial &nave);void reducirVida(NaveEspacial &nave);void dibujarScore(NaveEspacial &nave);//balasvoid iniciarBala(Bala bala[], int size, int velocidad);void dibujarBala(Bala bala[], int size,ALLEGRO_BITMAP *bullet);void dispararBala(Bala bala[], int size, NaveEspacial &nave);void actualizarBala(Bala bala[], int size,Enemigo enemigos[], int sizem,NaveEspacial &nave);void dispararBalaEnemiga(Bala bala[], int size, Enemigo enem);void actualizarBalaEnemiga(Bala bala[], int size, NaveEspacial &nave);//enemigovoid iniciarEnemigo(Enemigo enemigos[], int size);void dibujarEnemigo(Enemigo enemigos[], int size);void comenzarEnemigo(Enemigo enemigos[], int size);void actualizarEnemigo(Enemigo enemigos[], int size, NaveEspacial &nave);int main(int argc, char **argv){	//vriables primitivas	bool salir = false;//variable de condicion de salida	bool keys[5] = {false, false, false, false, false};//estado de las teclas presionadas	bool repintar = false;//si es necesario actualizar pantalla	int countbg = 0;//movimiento de la pantalla	//variables de allegro	ALLEGRO_BITMAP *bala1 = NULL;	ALLEGRO_BITMAP *bala2 = NULL;		//variables de objeto	NaveEspacial nave;	Bala balas[NUM_BALAS];	Enemigo enemigos[NUM_NAVES];	init();	intro();		//limpia la pantalla antes de iniciar el juego	al_clear_to_color(al_map_rgb(0,0,0));	al_flip_display();	event_queue = al_create_event_queue();//crea el evento	//carga las imagenes en los BITMAPS	bg = al_load_bitmap("img/bg.png");//fondo	player = al_load_bitmap("img/player.png");//nave del jugador 	enemigo = al_load_bitmap("img/enemy.png");//naves enemigas	bala1 = al_load_bitmap("img/bullet1.png");	bala2 = al_load_bitmap("img/bullet2.png");	vidas = al_load_bitmap("img/vida.png");	vidas_enem = al_load_bitmap("img/vida_enemigo.png");		//inicia todos los componentes	iniciarNave(nave);	iniciarBala(balas, NUM_BALAS,10);	iniciarBala(balasenemigas, NUM_BALAS,7);	iniciarEnemigo(enemigos, NUM_NAVES);	srand(time(NULL));//cargar numeros aleatorios	//agrega eventos	al_register_event_source(event_queue, al_get_keyboard_event_source());//teclado 	al_register_event_source(event_queue, al_get_display_event_source(display));//eventos de la pantalla   	al_register_event_source(event_queue, al_get_timer_event_source(timer));//temporizador	al_reserve_samples(2);//reserva los samples a usar 	laser = al_load_sample("sound/laser.ogg");//carga el sonido de los disparos	sample = al_load_sample("sound/space.ogg");//carga el sonido de fondo	al_play_sample(sample, 1, 0, 1, ALLEGRO_PLAYMODE_LOOP,NULL);//reproduce el fondo modo loop	al_start_timer(timer);//inicia el timmer	while(!salir){		ALLEGRO_EVENT ev;		al_wait_for_event(event_queue, &ev);//captura el evento		//si se necesita dibujar		if (repintar && al_is_event_queue_empty(event_queue)){			repintar = false;//cambia a falso para no crear un ciclo			//limpia la pantalla			al_clear_to_color(al_map_rgb(0,0,0));			al_draw_bitmap(bg,1000-countbg,0,0);			dibujarScore(nave);			al_draw_text(font24, al_map_rgb(255, 255, 255 ), 210, 5, ALLEGRO_ALIGN_LEFT, "Vidas:");			for(int i=0; i<nave.vidas;i++){				al_draw_bitmap(vidas,330+(i*41),5,0);			}						if (nave.score%20 == 0){//aumenta la velocidad cada 20 puntos				for (int i = 0; i < NUM_NAVES; ++i){					enemigos[i].velocidady += 1;					enemigos[i].velocidad += 1;				}				nave.score++;			}			//dibujar los componentes			dibujarNave(nave);			dibujarBala(balas, NUM_BALAS,bala1);			dibujarBala(balasenemigas, NUM_BALAS,bala2);				dibujarEnemigo(enemigos, NUM_NAVES);			al_flip_display();//muestra la pantalla			countbg+=2;//mueve la pantalla 2px			if(countbg >2500)//si pasa del ancho inicia de nuevo				countbg = 0;		}		//si los estados estan en verdaderos mueve el avion		if(ev.type == ALLEGRO_EVENT_TIMER) {         	if(keys[UP]) {         		moverNaveArriba(nave);         	}         	if(keys[DOWN]) {         		moverNaveAbajo(nave);         	}         	if(keys[LEFT]) {         		moverNaveIzquierda(nave);         	}         	if(keys[RIGHT]) {            	moverNaveDerecha(nave);        	}        	repintar=true;        	actualizarBala(balas,NUM_BALAS,enemigos,NUM_NAVES,nave);        	comenzarEnemigo(enemigos, NUM_NAVES);//si hay libre crea uno			actualizarEnemigo(enemigos,NUM_NAVES, nave);			actualizarBalaEnemiga(balasenemigas, NUM_BALAS, nave);     	}		if(ev.type == ALLEGRO_EVENT_KEY_DOWN){			switch(ev.keyboard.keycode){				case ALLEGRO_KEY_UP:					keys[UP]=true;				break;				case ALLEGRO_KEY_DOWN:					keys[DOWN]=true;				break;				case ALLEGRO_KEY_LEFT:					keys[LEFT]=true;				break;				case ALLEGRO_KEY_RIGHT:					keys[RIGHT]=true;				break;				case ALLEGRO_KEY_SPACE://si presiona ESPACIO dispara una bala					keys[SPACE] = true;					dispararBala(balas, NUM_BALAS, nave);					al_play_sample(laser, 1, 0, 1, ALLEGRO_PLAYMODE_ONCE,NULL);				break;			}		}		if(ev.type == ALLEGRO_EVENT_KEY_UP){//detener el movimiento			switch(ev.keyboard.keycode){				case ALLEGRO_KEY_UP:					keys[UP] = false;				break;				case ALLEGRO_KEY_DOWN:					keys[DOWN] = false;				break;				case ALLEGRO_KEY_LEFT:					keys[LEFT] = false;				break;				case ALLEGRO_KEY_RIGHT:					keys[RIGHT] = false;				break;				case ALLEGRO_KEY_SPACE:					keys[SPACE] = false;				break;				case ALLEGRO_KEY_ESCAPE://salir del juego					salir = true;				break;			}		}		//salir con el boton x		if(ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE){			 salir=true;		}			}	deinit();//cerrar la ventana	return 0;}//inicializar componentes devoid init(){	//inicializar allegro	if(!al_init()) {      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar allegro5", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);	}	//crear la ventana   	display = al_create_display(SCREEN_W, SCREEN_H);	if(!display) { // si falla imprimimos esto      al_show_native_message_box(NULL, "Error", NULL, "Falló al crear Display", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);	}	//iniciaializar teclado	if(!al_install_keyboard()) {      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar Teclado", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);   	}   	//inicializar fuente   	al_init_font_addon();   	al_init_ttf_addon();   	font24 = al_load_font("Arcade.ttf",44,0);   	font60 = al_load_font("Arcade.ttf",60,0);   	font100 = al_load_font("Arcade.ttf",100,0);   	//inicia primitivas para el bibujo   	if (!al_init_primitives_addon()){      al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar primitivas", NULL, ALLEGRO_MESSAGEBOX_ERROR);      exit(0);   	}   	//inicializamos el uso de imagenes   	if(!al_init_image_addon()) {     	al_show_native_message_box(display, "Error", "Error", "Failed to initialize al_init_image_addon!", NULL, ALLEGRO_MESSAGEBOX_ERROR);    	exit(0);   	}   	//crear el timer   	timer = al_create_timer(1.0 / FPS);   	if(!timer) {//en caso de no crear el timer      	al_show_native_message_box(NULL, "Error", NULL, "Falló al inicializar el timer", NULL, ALLEGRO_MESSAGEBOX_ERROR);	}	//instalar componentes de audio	al_install_audio();	al_init_acodec_addon();   	//todos los componentes cargados   	icon = al_load_bitmap("img/icon.png");   	al_set_display_icon(display, icon);// icono del programa   	al_set_window_title(display, "SPACE X!");//agregar titulo}//finalizar los componentes de allegrovoid deinit(){	al_destroy_display(display);//destruye la pantalla y libera memoria	al_destroy_timer(timer);//destuye el timer	exit(0);}//Mensaje de introvoid intro(){	char messages [2][30] = {"SPACE X", "by Josegomz"};	for (int i = 0; i < 2; ++i){		al_clear_to_color(al_map_rgb(0, 0, 0));		al_draw_text(font24, al_map_rgb(0, 250, 250), SCREEN_W/2, SCREEN_H/2, ALLEGRO_ALIGN_CENTRE, messages[i]);		al_flip_display();		al_rest(0.5);//espera .5 segundos	}	al_clear_to_color(al_map_rgb(0, 0, 0));	al_draw_text(font24, al_map_rgb(255, 255, 255 ), SCREEN_W/2, SCREEN_H/2, ALLEGRO_ALIGN_CENTRE, "Start");	al_flip_display();	al_rest(.5);//espera .5 segundos}//inicializar la nave espacialvoid iniciarNave(NaveEspacial &nave){	nave.x = 20;	nave.y = SCREEN_H/2-15;		nave.ID = JUGADOR;	nave.vidas = 3;	nave.velocidad = 7;	nave.score = 1;	nave.boundx = 20;	nave.boundy = 25;}//dibujar la navevoid dibujarNave(NaveEspacial &nave){	al_draw_bitmap(player,nave.x-30,nave.y-30,0);}//mover la nave a los 4 ladosvoid moverNaveArriba(NaveEspacial &nave){	nave.y -= nave.velocidad;	if(nave.y < 0)		nave.y = 0; }void moverNaveAbajo(NaveEspacial &nave){	nave.y += nave.velocidad;	if (nave.y > SCREEN_H)		nave.y = SCREEN_H;}void moverNaveIzquierda(NaveEspacial &nave){	nave.x -= nave.velocidad;	if (nave.x < 0)		nave.x = 0;}void moverNaveDerecha(NaveEspacial &nave){	nave.x += nave.velocidad;	if (nave.x > SCREEN_W){		nave.y = SCREEN_W;	}}//funciones de las balasvoid iniciarBala(Bala bala[], int size,int velocidad){	for (int i = 0; i < size; ++i){		bala[i].ID = BALA;		bala[i].velocidad = 10;		bala[i].vivo = false;	}}void dibujarBala(Bala bala[], int size,ALLEGRO_BITMAP *bullet){	for (int i = 0; i < size; ++i)		if (bala[i].vivo)			al_draw_bitmap(bullet, bala[i].x-15, bala[i].y-15,0);}void dispararBala(Bala bala[], int size, NaveEspacial &nave){	for (int i = 0; i < size; ++i){		if (!bala[i].vivo){			bala[i].x = nave.x + 20;			bala[i].y = nave.y;			bala[i].vivo = true;			break;		}	}}void dispararBalaEnemiga(Bala bala[], int size, Enemigo enem){	for (int i = 0; i < size; ++i){		if (!bala[i].vivo){			if (rand() % 20 == 0){				bala[i].x = enem.x - 20;				bala[i].y = enem.y;				bala[i].vivo = true;			}		}	}}	void actualizarBala(Bala bala[], int size, Enemigo enemigos[],int sizem, NaveEspacial &nave){	for (int i = 0; i < size; ++i){		if (bala[i].vivo){			bala[i].x += bala[i].velocidad;			if (bala[i].x > SCREEN_W+15){				bala[i].vivo=false;			}			for (int j = 0; j < sizem; ++j)			{				if (bala[i].x > enemigos[j].x - enemigos[j].boundx && bala[i].x < enemigos[j].x + enemigos[j].boundx && ((bala[i].y -10 > enemigos[j].y - enemigos[j].boundy && bala[i].y-10 < enemigos[j].y + enemigos[j].boundy) || (bala[i].y +10 > enemigos[j].y - enemigos[j].boundy && bala[i].y+10 < enemigos[j].y + enemigos[j].boundy))){					enemigos[j].vivo=false;					enemigos[j].x = -30;					bala[i].vivo = false;					nave.score++;				}			}		}	}}	void actualizarBalaEnemiga(Bala bala[], int size, NaveEspacial &nave){	for (int i = 0; i < size; ++i){		if (bala[i].vivo){			bala[i].x -= bala[i].velocidad;			if (bala[i].x < 0)				bala[i].vivo=false;			if (bala[i].x > nave.x - nave.boundx && bala[i].x < nave.x + nave.boundx &&((bala[i].y -10 > nave.y - nave.boundy && bala[i].y-10 < nave.y + nave.boundy) || (bala[i].y +10 > nave.y - nave.boundy && bala[i].y+10 < nave.y + nave.boundy))){				bala[i].x =SCREEN_W;				bala[i].vivo = false;				reducirVida(nave);			}		}	}}//funciones del enemigovoid iniciarEnemigo(Enemigo enemigos[], int size){	for (int i = 0; i < size; ++i){		enemigos[i].ID =ENEMIGO;		enemigos[i].vivo = false;		enemigos[i].vidas = 3;		enemigos[i].velocidad = 1;		enemigos[i].velocidady = 2;		enemigos[i].boundx = 20;		enemigos[i].boundy = 20;	}}void dibujarEnemigo(Enemigo enemigos[], int size){	for (int i = 0; i < size; ++i)		if (enemigos[i].vivo){			al_draw_bitmap(enemigo, enemigos[i].x -30, enemigos[i].y - 30, 0);						al_draw_bitmap(vidas_enem, enemigos[i].x -15, enemigos[i].y - 35, 0);			al_draw_bitmap(vidas_enem, enemigos[i].x -5, enemigos[i].y - 35, 0);			al_draw_bitmap(vidas_enem, enemigos[i].x +5, enemigos[i].y - 35, 0);		}}void comenzarEnemigo(Enemigo enemigos[], int size){	for (int i = 0; i < size; ++i){		if (!enemigos[i].vivo){			if (rand() % 500 == 0){				enemigos[i].vivo = true;				enemigos[i].x = SCREEN_W;				enemigos[i].y = 30 + rand()%(SCREEN_H -60);			}		}	}}void actualizarEnemigo(Enemigo enemigos[], int size, NaveEspacial &nave){	for (int i = 0; i < size; ++i){		if (enemigos[i].vivo){			enemigos[i].x -= enemigos[i].velocidad;			enemigos[i].y += enemigos[i].velocidady;			if(enemigos[i].y-30 < 0 || enemigos[i].y > SCREEN_H - 30) {            	enemigos[i].velocidady = -enemigos[i].velocidady;         	}			if (enemigos[i].x < -10){				enemigos[i].vivo=false;				gameOver();			}			if(nave.y > enemigos[i].y - 10 && nave.y < enemigos[i].y + 10){				dispararBalaEnemiga(balasenemigas, NUM_BALAS, enemigos[i]);			}			if (enemigos[i].x - enemigos[i].boundx > nave.x - nave.boundx && enemigos[i].x - enemigos[i].boundx < nave.x + nave.boundx &&((enemigos[i].y - enemigos[i].boundy  < nave.y + nave.boundy && enemigos[i].y - enemigos[i].boundy > nave.y - nave.boundy) || (enemigos[i].y + enemigos[i].boundy  < nave.y + nave.boundy && enemigos[i].y + enemigos[i].boundy > nave.y - nave.boundy))){				enemigos[i].x = SCREEN_W;				enemigos[i].vivo = false;				reducirVida(nave);			}		}	}}void reducirVida(NaveEspacial &nave){	nave.vidas--;	if (nave.vidas==0){		gameOver();	}	}void dibujarScore(NaveEspacial &nave){	al_draw_text(font24, al_map_rgb(255, 255, 255 ), 10, 5, ALLEGRO_ALIGN_LEFT, "Score:");	if (nave.score<10)		al_draw_textf(font24, al_map_rgb(255, 0, 0 ), 135, 5, ALLEGRO_ALIGN_LEFT, "00%i",nave.score);	else if(nave.score<100)		al_draw_textf(font24, al_map_rgb(255, 0, 0 ), 135, 5, ALLEGRO_ALIGN_LEFT, "0%i",nave.score);	else		al_draw_textf(font24, al_map_rgb(255, 0, 0 ), 135, 5, ALLEGRO_ALIGN_LEFT, "%i",nave.score);}void gameOver(){	al_draw_text(font100, al_map_rgb(255, 255, 0), SCREEN_W/2, SCREEN_H/2 -120, ALLEGRO_ALIGN_CENTRE, "GAME OVER");	al_draw_text(font100, al_map_rgb(255, 0, 0), SCREEN_W/2 -1, SCREEN_H/2 -121, ALLEGRO_ALIGN_CENTRE, "GAME OVER");	al_draw_text(font60, al_map_rgb(255, 255, 255), SCREEN_W/2, SCREEN_H/2 +11, ALLEGRO_ALIGN_CENTRE, "Presiona Enter para finalizar..");	al_flip_display();	while(true){		ALLEGRO_EVENT evt;		al_wait_for_event(event_queue, &evt);		if(evt.type == ALLEGRO_EVENT_KEY_DOWN)			if(evt.keyboard.keycode == ALLEGRO_KEY_ENTER)				break;	}	deinit();}